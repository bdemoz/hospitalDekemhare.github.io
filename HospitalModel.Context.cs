//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalDC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalEntities : DbContext
    {
        public HospitalEntities()
            : base("name=HospitalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Physician> Physicians { get; set; }
    
        public virtual int insertPhysician(string title, string firstName, string lastName, Nullable<System.DateTime> dob, Nullable<System.DateTime> licenceDate, string speciality, string practice, string note)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var licenceDateParameter = licenceDate.HasValue ?
                new ObjectParameter("licenceDate", licenceDate) :
                new ObjectParameter("licenceDate", typeof(System.DateTime));
    
            var specialityParameter = speciality != null ?
                new ObjectParameter("speciality", speciality) :
                new ObjectParameter("speciality", typeof(string));
    
            var practiceParameter = practice != null ?
                new ObjectParameter("practice", practice) :
                new ObjectParameter("practice", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertPhysician", titleParameter, firstNameParameter, lastNameParameter, dobParameter, licenceDateParameter, specialityParameter, practiceParameter, noteParameter);
        }
    }
}
